-- MySQL Script generated by MySQL Workbench
-- Mon Oct 11 19:33:02 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema happypet
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema happypet
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `happypet` DEFAULT CHARACTER SET utf8 ;
USE `happypet` ;

-- -----------------------------------------------------
-- Table `happypet`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`usuario` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT COMMENT 'Código de usuario, automático',
  `id_tercero` INT NOT NULL COMMENT 'codigo de tercero',
  `fecha_creacion` DATETIME NOT NULL DEFAULT sysdate COMMENT 'Fecha creación del usuario',
  `fecha_retiro` DATETIME NULL COMMENT 'fecha retiro o inactivacipon de usuario',
  `estado` VARCHAR(1) NOT NULL DEFAULT 'A' COMMENT 'Activo/ Inactivo',
  `usuario_creo` VARCHAR(20) NOT NULL COMMENT 'identificación de quien crea el usuario',
  `usuario_retiro` VARCHAR(20) NULL COMMENT 'identificación de usuario que retira o incativa el usuario',
  PRIMARY KEY (`id_usuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Perfil`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Perfil` (
  `id_perfil` INT NOT NULL AUTO_INCREMENT COMMENT 'identificación de perfil',
  `descripcion` VARCHAR(10) NOT NULL COMMENT 'nombre del perfil',
  PRIMARY KEY (`id_perfil`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`bd_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`bd_user` (
  `login` VARCHAR(20) NOT NULL COMMENT 'identificador del usuario en la bd',
  `id_usuario` INT NOT NULL COMMENT 'identificación del usuario al que se le asigna el login',
  `perfil` INT NOT NULL COMMENT 'perfil asignado al usuario',
  `estado` VARCHAR(1) NOT NULL COMMENT 'Activo o inactivo en la bd',
  `Perfil_id_perfil` INT NOT NULL,
  `usuario_id_usuario` INT NOT NULL,
  PRIMARY KEY (`login`),
  INDEX `fk_bd_user_Perfil1_idx` (`Perfil_id_perfil` ASC) VISIBLE,
  INDEX `fk_bd_user_usuario1_idx` (`usuario_id_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_bd_user_Perfil1`
    FOREIGN KEY (`Perfil_id_perfil`)
    REFERENCES `happypet`.`Perfil` (`id_perfil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_bd_user_usuario1`
    FOREIGN KEY (`usuario_id_usuario`)
    REFERENCES `happypet`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Modulos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Modulos` (
  `id_modulo` VARCHAR(10) NOT NULL COMMENT 'código del módulo (Menú) u objeto',
  `descripcion` VARCHAR(45) NULL,
  PRIMARY KEY (`id_modulo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Funciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Funciones` (
  `id_funcion` VARCHAR(5) NOT NULL COMMENT 'Codigo de la función',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Nombre de la función',
  `id_modulo` VARCHAR(10) NULL COMMENT 'identificación del módulo al cual pertence la función',
  `Modulos_id_modulo` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id_funcion`),
  INDEX `fk_Funciones_Modulos1_idx` (`Modulos_id_modulo` ASC) VISIBLE,
  CONSTRAINT `fk_Funciones_Modulos1`
    FOREIGN KEY (`Modulos_id_modulo`)
    REFERENCES `happypet`.`Modulos` (`id_modulo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`permisos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`permisos` (
  `id_permiso` VARCHAR(10) NOT NULL COMMENT 'codigo del permiso',
  `id_funcion` VARCHAR(5) NOT NULL COMMENT 'función a la cual  pertenece el permiso',
  `ejecutar` TINYINT NOT NULL COMMENT 'puede ejecutarlo o no',
  `consultar` TINYINT NOT NULL COMMENT 'puede consultar o mostrar',
  `eliminar` TINYINT NOT NULL COMMENT 'puede eliminar',
  `modificar` TINYINT NOT NULL COMMENT 'si puede modificar',
  `adicionar` TINYINT NOT NULL COMMENT 'se permite la operacion de adicionar',
  `activar` TINYINT NOT NULL COMMENT 'permiso de activar',
  `inactivar` TINYINT NOT NULL COMMENT 'puede o no inactivar',
  `Funciones_id_funcion` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id_permiso`),
  INDEX `fk_permisos_Funciones1_idx` (`Funciones_id_funcion` ASC) VISIBLE,
  CONSTRAINT `fk_permisos_Funciones1`
    FOREIGN KEY (`Funciones_id_funcion`)
    REFERENCES `happypet`.`Funciones` (`id_funcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`funcionxperfil`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`funcionxperfil` (
  `id_perfil` INT NOT NULL COMMENT 'identifica al perfil al cual se la asocia la función\n',
  `id_funcion` VARCHAR(5) NOT NULL COMMENT 'identifica la función asignada al perfil',
  `Perfil_id_perfil` INT NOT NULL,
  `Funciones_id_funcion` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id_perfil`),
  INDEX `fk_funcionxperfil_Perfil1_idx` (`Perfil_id_perfil` ASC) VISIBLE,
  INDEX `fk_funcionxperfil_Funciones1_idx` (`Funciones_id_funcion` ASC) VISIBLE,
  CONSTRAINT `fk_funcionxperfil_Perfil1`
    FOREIGN KEY (`Perfil_id_perfil`)
    REFERENCES `happypet`.`Perfil` (`id_perfil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionxperfil_Funciones1`
    FOREIGN KEY (`Funciones_id_funcion`)
    REFERENCES `happypet`.`Funciones` (`id_funcion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Ciudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Ciudad` (
  `cod_dane` INT NOT NULL,
  `nombre_ciudad` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`cod_dane`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Terceros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Terceros` (
  `id_tercero` INT NOT NULL AUTO_INCREMENT COMMENT 'código del tercero',
  `num_documento` INT NOT NULL COMMENT 'Documento de identificación del tercero',
  `nombre_tercero` VARCHAR(80) NOT NULL COMMENT 'Nombre del tercero',
  `dir_tercero` VARCHAR(80) NULL COMMENT 'Dirección de envío o residencia del tercero',
  `tel_tercero` INT NULL COMMENT 'numero de contacto del tercero',
  `email_tercero` VARCHAR(80) NULL COMMENT 'correo electrónico del tercero',
  `tipo_tercero` VARCHAR(1) NOT NULL COMMENT 'Tipo de tercero  E-empleado C- cliente',
  `Terceroscol` VARCHAR(45) NOT NULL,
  `acepta_trat_datos` VARCHAR(1) NOT NULL,
  `fecha_creacion` DATETIME NOT NULL DEFAULT sysdate COMMENT 'Fecha en que se crea al tercero',
  `usuario_id_usuario` INT NOT NULL,
  `Ciudad_cod_dane` INT NOT NULL,
  PRIMARY KEY (`id_tercero`),
  INDEX `fk_Terceros_usuario1_idx` (`usuario_id_usuario` ASC) VISIBLE,
  INDEX `fk_Terceros_Ciudad1_idx` (`Ciudad_cod_dane` ASC) VISIBLE,
  CONSTRAINT `fk_Terceros_usuario1`
    FOREIGN KEY (`usuario_id_usuario`)
    REFERENCES `happypet`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Terceros_Ciudad1`
    FOREIGN KEY (`Ciudad_cod_dane`)
    REFERENCES `happypet`.`Ciudad` (`cod_dane`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Comprobante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Comprobante` (
  `id_comprobante` INT NOT NULL AUTO_INCREMENT COMMENT 'identificador interno de comprobante',
  `id_tercero` INT NULL,
  `num_comrpobante` VARCHAR(20) NULL COMMENT 'Fra de compra (proveedor), fra de venta (esta se genera al momento del pago)',
  `cod_transaccion` VARCHAR(3) NOT NULL,
  `fecha` DATE NULL COMMENT 'Fecha del documento, corresponde al último cambio en orden de compra o fecha de factura del proveedor',
  `estado_doc` VARCHAR(1) NOT NULL DEFAULT 'T' COMMENT 'Estado del comprobante: P-pendiente pago, A-Anulado, C-Pagado,I-inventariado,T-Trámite(default)',
  `fecha_registro` DATETIME NOT NULL DEFAULT sysdate COMMENT 'Fecha en que se crea el documento',
  `usuario` VARCHAR(20) NOT NULL DEFAULT 'cliente' COMMENT 'login del usuario que registra el comprobante',
  `valor_descuento` FLOAT NULL COMMENT 'Si el documento tiene aplicado un descuento, se guarda el valor',
  `Terceros_id_tercero` INT NOT NULL,
  PRIMARY KEY (`id_comprobante`),
  UNIQUE INDEX `num_comrpobante_UNIQUE` (`num_comrpobante` ASC) VISIBLE,
  INDEX `fk_Comprobante_Terceros1_idx` (`Terceros_id_tercero` ASC) VISIBLE,
  CONSTRAINT `fk_Comprobante_Terceros1`
    FOREIGN KEY (`Terceros_id_tercero`)
    REFERENCES `happypet`.`Terceros` (`id_tercero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`tipo_items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`tipo_items` (
  `id_tipo` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_tipo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`unidades_medida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`unidades_medida` (
  `id_unidad` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_unidad`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`categoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`categoria` (
  `id_categoria` VARCHAR(1) NOT NULL,
  `descripcion` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id_categoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Items` (
  `codigo_item` VARCHAR(10) NOT NULL COMMENT 'codigo item',
  `descripcion` VARCHAR(80) NOT NULL COMMENT 'Descripcion corta del item',
  `detalle` VARCHAR(150) NOT NULL COMMENT 'descripcion detallada del item',
  `tipo_articulo` INT NOT NULL COMMENT 'codi tipo item',
  `mascota` VARCHAR(1) NOT NULL COMMENT 'cod categoria de mascota',
  `unidad` INT NOT NULL COMMENT 'unidad de medida (presentación)',
  `gravado` TINYINT NOT NULL COMMENT 'si el item tiene iva o no',
  `imagen_articulo` VARCHAR(200) NOT NULL,
  `fecha_creacion` DATETIME NOT NULL DEFAULT sysdate COMMENT 'fecha de creación del item',
  `peso` FLOAT NOT NULL COMMENT 'peso en kg del artículo',
  `precio_venta` FLOAT NOT NULL DEFAULT 1 COMMENT 'precio en q se vende el artículo',
  `estado` VARCHAR(1) NOT NULL DEFAULT 'A' COMMENT 'Activo o inactivo',
  `usuario_creo` VARCHAR(20) NULL DEFAULT 'administrador' COMMENT 'quien crea el artículo',
  `tipo_items_id_tipo` INT NOT NULL,
  `unidades_medida_id_unidad` INT NOT NULL,
  `categoria_id_categoria` VARCHAR(1) NOT NULL,
  PRIMARY KEY (`codigo_item`),
  INDEX `fk_Items_tipo_items1_idx` (`tipo_items_id_tipo` ASC) VISIBLE,
  INDEX `fk_Items_unidades_medida1_idx` (`unidades_medida_id_unidad` ASC) VISIBLE,
  INDEX `fk_Items_categoria1_idx` (`categoria_id_categoria` ASC) VISIBLE,
  CONSTRAINT `fk_Items_tipo_items1`
    FOREIGN KEY (`tipo_items_id_tipo`)
    REFERENCES `happypet`.`tipo_items` (`id_tipo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Items_unidades_medida1`
    FOREIGN KEY (`unidades_medida_id_unidad`)
    REFERENCES `happypet`.`unidades_medida` (`id_unidad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Items_categoria1`
    FOREIGN KEY (`categoria_id_categoria`)
    REFERENCES `happypet`.`categoria` (`id_categoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `happypet`.`Detalle_comprobante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `happypet`.`Detalle_comprobante` (
  `id_comprobante` INT NOT NULL COMMENT 'id interna del comprobante al cual pertence el detalle',
  `num_comprobante` VARCHAR(20) NULL COMMENT 'Numero del comprobante -factura ',
  `codigo_item` VARCHAR(10) NOT NULL COMMENT 'Código del item a vender o comprar',
  `cantidad` FLOAT NOT NULL COMMENT 'cantidad de venta o compra',
  `valor_u` FLOAT NOT NULL DEFAULT 1 COMMENT 'Valor unitario del item a comprar o vender',
  `Comprobante_idComprobante` INT NOT NULL,
  INDEX `fk_Detalle_comprobante_Comprobante1_idx` (`id_comprobante` ASC) VISIBLE,
  INDEX `fk_detalle_items_idx` (`codigo_item` ASC) VISIBLE,
  CONSTRAINT `fk_Detalle_comprobante_Comprobante1`
    FOREIGN KEY (`id_comprobante`)
    REFERENCES `happypet`.`Comprobante` (`id_comprobante`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_detalle_items`
    FOREIGN KEY (`codigo_item`)
    REFERENCES `happypet`.`Items` (`codigo_item`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
